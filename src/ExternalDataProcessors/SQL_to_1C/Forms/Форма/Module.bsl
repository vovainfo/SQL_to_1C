#Область ОбработчикиСобытийФормы
	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		СтруктураБД = ПолучитьСтруктуруХраненияБазыДанных();
		Для Каждого стр Из СтруктураБД Цикл
			стр.ИмяТаблицыХранения = "_" + СтрЗаменить(стр.ИмяТаблицыХранения, ".", "_");
		КонецЦикла;
		ЗначениеВРеквизитФормы(СтруктураБД, "ТаблицаСтруктураБД");
		ЗаполнитьТаблицуПоля();	
	КонецПроцедуры
#КонецОбласти


#Область ОбработчикиКомандФормы
	&НаКлиенте
	Процедура СформироватьЗапрос1С(Команда)
		СформироватьЗапрос1СНаСервере();
	КонецПроцедуры

	&НаКлиенте
	Процедура ПарсингЗапроса(Команда)
		ПарсингЗапросаНаСервере();
	КонецПроцедуры

	&НаКлиенте
	Асинх Процедура СохранитьСтруктуруБДВФайл(Команда)
	#Если НЕ ВебКлиент Тогда
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.Фильтр = НСтр("ru = 'Файлы XML (*.xml)|*.xml|Все файлы(*.*)|*.*'");
		Результат = Ждать ДиалогСохраненияФайла.ВыбратьАсинх();
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаXML = СохранитьСтруктуруБДВФайлНаСервере();
		Текст = Новый ЗаписьТекста(Результат[0], КодировкаТекста.UTF8);
		Текст.Записать(СтрокаXML); 
		Текст.Закрыть();
	#КонецЕсли	
	КонецПроцедуры

	&НаКлиенте
	Асинх Процедура ЗагрузитьСтруктуруБДИзФайла(Команда)
	#Если НЕ ВебКлиент Тогда
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Файлы XML (*.xml)|*.xml|Все файлы(*.*)|*.*'");
		Результат = Ждать ДиалогОткрытияФайла.ВыбратьАсинх();
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		ТекстовыйФайл = Новый ЧтениеТекста("C:\tmp2\файл.txt");
		СтрокаXML = ТекстовыйФайл.Прочитать();
		ЗагрузитьСтруктуруБДИзФайлаНаСервере(СтрокаXML);
	#КонецЕсли	
	КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	&НаСервере
	Процедура СформироватьЗапрос1СНаСервере()
		ТЗ_СДлиной = Новый ТаблицаЗначений;
		ТЗ_СДлиной.Колонки.Добавить("СтрSQL", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
		ТЗ_СДлиной.Колонки.Добавить("Стр1С", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
		ТЗ_СДлиной.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Любой)));
		
		Для Каждого стр Из ТаблицаСоответствия Цикл
			Если ЗначениеЗаполнено(стр.Стр1С) Тогда
				НоваяСтрока = ТЗ_СДлиной.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, стр);
				НоваяСтрока.Длина = СтрДлина(НоваяСтрока.СтрSQL);
			КонецЕсли;
		КонецЦикла;
		
		ТЗ_СДлиной.Сортировать("Длина Убыв");
		
		Запрос1С = ЗапросSQL;
		Для Каждого стр Из ТЗ_СДлиной Цикл
			Запрос1С = СтрЗаменить(Запрос1С, стр.СтрSQL, стр.Стр1С);		
		КонецЦикла;
	КонецПроцедуры

	&НаСервере
	Процедура ПарсингЗапросаНаСервере()
		МассивСтрок = СтрРазделить(ЗапросSQL, " ,()-+/\%*';<=>.!?:"+Символы.ПС,Ложь);
	
		Для Каждого стр Из МассивСтрок Цикл
			Если НЕ ЭтоПотенциальныйИдентификатор(стр) Тогда
				Продолжить;
			КонецЕсли;
			Строки = ТаблицаСоответствия.НайтиСтроки(Новый Структура("СтрSQL", стр));
			Если Строки.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаСоответствия.Добавить();
				НоваяСтрока.СтрSQL = стр;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого стр Из ТаблицаСоответствия Цикл
			ИмяТаблицы = ПолучитьИмяТаблицы(стр.СтрSQL);
			Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
				стр.Стр1С = ИмяТаблицы;
				Продолжить;
			КонецЕсли;
			
			ИмяПоля = ПолучитьИмяПоля(стр.СтрSQL);
			Если ЗначениеЗаполнено(ИмяПоля) Тогда
				стр.Стр1С = ИмяПоля;
			КонецЕсли;
		КонецЦикла;	
	КонецПроцедуры

	&НаСервере
	Функция СохранитьСтруктуруБДВФайлНаСервере()
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, РеквизитФормыВЗначение("ТаблицаСтруктураБД"));
		СтрокаXML = ЗаписьXML.Закрыть();
		
		Возврат СтрокаXML;
	КонецФункции

	&НаСервере
	Процедура ЗагрузитьСтруктуруБДИзФайлаНаСервере(СтрокаXML)
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ЗначениеВРеквизитФормы(СериализаторXDTO.ПрочитатьXML(ЧтениеXML), "ТаблицаСтруктураБД");
		ЗаполнитьТаблицуПоля();
	КонецПроцедуры

	&НаСервере
	Процедура ЗаполнитьТаблицуПоля()
		Для Каждого Таблица Из ТаблицаСтруктураБД Цикл
			Для Каждого Поле Из Таблица.Поля Цикл
				НоваяСтрока = ТаблицаПоля.Добавить();
				НоваяСтрока.ИмяТаблицы = Таблица.ИмяТаблицы;
				НоваяСтрока.ИмяТаблицыХранения = Таблица.ИмяТаблицыХранения;
				НоваяСтрока.ИмяПоляХранения = ?(Поле.ИмяПоляХранения="", "", "_"+Поле.ИмяПоляХранения);
				НоваяСтрока.ИмяПоля = Поле.ИмяПоля;
				НоваяСтрока.Метаданные = Поле.Метаданные;
			КонецЦикла;
		КонецЦикла;
	КонецПроцедуры

	&НаСервереБезКонтекста
	Функция ЭтоПотенциальныйИдентификатор(Стр)
		//@skip-check empty-except-statement
		Попытка
			//@skip-check module-unused-local-variable
			Ааа = Число(Стр);
			Возврат Ложь;
		Исключение
		КонецПопытки;
		
		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция ПолучитьИмяТаблицы(СтрSQL)
		СтрокиТаблицы = ТаблицаСтруктураБД.НайтиСтроки(Новый Структура("ИмяТаблицыХранения", СтрSQL));
		Если СтрокиТаблицы.Количество() = 1 Тогда
			Возврат СтрокиТаблицы[0].Метаданные;
		КонецЕсли;
		Возврат Неопределено;		
	КонецФункции

	&НаСервере
	Функция ПолучитьИмяПоля(СтрSQL)
		СтрокиПоля = ТаблицаПоля.НайтиСтроки(Новый Структура("ИмяПоляХранения", СтрSQL));
		Для Каждого СтрПоля Из СтрокиПоля Цикл
			Если ЗначениеЗаполнено(СтрПоля.ИмяПоля) Тогда
				Возврат СтрПоля.ИмяПоля;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрЗаканчиваетсяНа(СтрSQL, "RRef") Тогда
			Возврат ПолучитьИмяПоля(Лев(СтрSQL, СтрДлина(СтрSQL)-4));
		КонецЕсли;
		
		Возврат Неопределено;
	КонецФункции
#КонецОбласти